--- a/net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureManager.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureManager.java
@@ -34,7 +34,7 @@
     private static final String STRUCTURE_DIRECTORY_NAME = "structures";
     private static final String STRUCTURE_FILE_EXTENSION = ".nbt";
     private static final String STRUCTURE_TEXT_FILE_EXTENSION = ".snbt";
-    private final Map<MinecraftKey, Optional<DefinedStructure>> structureRepository = Maps.newConcurrentMap();
+    public final Map<MinecraftKey, Optional<DefinedStructure>> structureRepository = Maps.newConcurrentMap(); // PAIL private->public
     private final DataFixer fixerUpper;
     private IResourceManager resourceManager;
     private final Path generatedDir;
@@ -71,7 +71,7 @@
         this.structureRepository.clear();
     }
 
-    private Optional<DefinedStructure> e(MinecraftKey minecraftkey) {
+    public Optional<DefinedStructure> e(MinecraftKey minecraftkey) { // PAIL private->public
         MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.getNamespace(), "structures/" + minecraftkey.getKey() + ".nbt");
 
         try {
@@ -106,7 +106,7 @@
         }
     }
 
-    private Optional<DefinedStructure> f(MinecraftKey minecraftkey) {
+    public Optional<DefinedStructure> f(MinecraftKey minecraftkey) { // PAIL private->public
         if (!this.generatedDir.toFile().isDirectory()) {
             return Optional.empty();
         } else {
@@ -140,7 +140,7 @@
         }
     }
 
-    private DefinedStructure a(InputStream inputstream) throws IOException {
+    public DefinedStructure a(InputStream inputstream) throws IOException { //PAIL rename loadFromStream; private -> public
         NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a(inputstream);
 
         return this.a(nbttagcompound);
@@ -214,7 +214,7 @@
         }
     }
 
-    private Path b(MinecraftKey minecraftkey, String s) {
+    public Path b(MinecraftKey minecraftkey, String s) { //PAIL private->public
         if (minecraftkey.getKey().contains("//")) {
             throw new ResourceKeyInvalidException("Invalid resource path: " + minecraftkey);
         } else {
