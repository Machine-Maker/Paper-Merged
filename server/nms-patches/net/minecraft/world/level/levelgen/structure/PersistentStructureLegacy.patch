--- a/net/minecraft/world/level/levelgen/structure/PersistentStructureLegacy.java
+++ b/net/minecraft/world/level/levelgen/structure/PersistentStructureLegacy.java
@@ -20,6 +20,10 @@
 import net.minecraft.world.level.levelgen.feature.StructureGenerator;
 import net.minecraft.world.level.storage.WorldPersistentData;
 
+// CraftBukkit start
+import net.minecraft.world.level.dimension.DimensionManager;
+// CraftBukkit end
+
 public class PersistentStructureLegacy {
 
     private static final Map<String, String> CURRENT_TO_LEGACY_MAP = (Map) SystemUtils.make(Maps.newHashMap(), (hashmap) -> {
@@ -234,16 +238,16 @@
         }
     }
 
-    public static PersistentStructureLegacy getLegacyStructureHandler(ResourceKey<World> resourcekey, @Nullable WorldPersistentData worldpersistentdata) {
-        if (resourcekey == World.OVERWORLD) {
+    public static PersistentStructureLegacy getLegacyStructureHandler(ResourceKey<DimensionManager> resourcekey, @Nullable WorldPersistentData worldpersistentdata) { // CraftBukkit
+        if (resourcekey == DimensionManager.OVERWORLD_LOCATION) { // CraftBukkit
             return new PersistentStructureLegacy(worldpersistentdata, ImmutableList.of("Monument", "Stronghold", "Village", "Mineshaft", "Temple", "Mansion"), ImmutableList.of("Village", "Mineshaft", "Mansion", "Igloo", "Desert_Pyramid", "Jungle_Pyramid", "Swamp_Hut", "Stronghold", "Monument"));
         } else {
             ImmutableList immutablelist;
 
-            if (resourcekey == World.NETHER) {
+            if (resourcekey == DimensionManager.NETHER_LOCATION) { // CraftBukkit
                 immutablelist = ImmutableList.of("Fortress");
                 return new PersistentStructureLegacy(worldpersistentdata, immutablelist, immutablelist);
-            } else if (resourcekey == World.END) {
+            } else if (resourcekey == DimensionManager.END_LOCATION) { // CraftBukkit
                 immutablelist = ImmutableList.of("EndCity");
                 return new PersistentStructureLegacy(worldpersistentdata, immutablelist, immutablelist);
             } else {
